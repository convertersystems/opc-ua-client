// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------

[assembly: Workstation.ServiceModel.Ua.TypeLibrary]
namespace SimaticTypeLibrary
{
    /// <summary>
    /// The SimaticOperatingState enumeration.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;i=3063")]
    public enum SimaticOperatingState
    {
        NotSupported = 0,
        StopFwUpdate = 1,
        StopSelfInitialization = 3,
        Stop = 4,
        Startup = 6,
        Run = 8,
        RunRedundant = 9,
        Halt = 10,
        RunSyncUp = 11,
        SyncUp = 12,
        Defective = 13,
        ErrorSearch = 14,
        NoPower = 15,
        CiR = 16,
        STOPwithoutODIS = 17,
        RunODIS = 18,
        PgmTest = 19,
    }
    
    /// <summary>
    /// Pre defined data structures that are defined and that can be used
    /// multiple times within the program.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;i=3500")]
    public abstract class SimaticSystemStructures : Workstation.ServiceModel.Ua.Structure
    {
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_Compact_SUT data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_Compact_SUT")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_Compact_SUT")]
    public class PID_Compact_SUT : SimaticSystemStructures
    {
        /// <summary>
        /// The CalculateParams property.
        /// </summary>
        public bool CalculateParams { get; set; }
        
        /// <summary>
        /// The TuneRule property.
        /// </summary>
        public short TuneRule { get; set; }
        
        /// <summary>
        /// The State property.
        /// </summary>
        public short State { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteBoolean("CalculateParams", CalculateParams);
            encoder.WriteInt16("TuneRule", TuneRule);
            encoder.WriteInt16("State", State);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            CalculateParams = decoder.ReadBoolean("CalculateParams");
            TuneRule = decoder.ReadInt16("TuneRule");
            State = decoder.ReadInt16("State");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_Compact_TIR data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_Compact_TIR")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_Compact_TIR")]
    public class PID_Compact_TIR : SimaticSystemStructures
    {
        /// <summary>
        /// The RunIn property.
        /// </summary>
        public bool RunIn { get; set; }
        
        /// <summary>
        /// The CalculateParams property.
        /// </summary>
        public bool CalculateParams { get; set; }
        
        /// <summary>
        /// The TuneRule property.
        /// </summary>
        public short TuneRule { get; set; }
        
        /// <summary>
        /// The State property.
        /// </summary>
        public short State { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteBoolean("RunIn", RunIn);
            encoder.WriteBoolean("CalculateParams", CalculateParams);
            encoder.WriteInt16("TuneRule", TuneRule);
            encoder.WriteInt16("State", State);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            RunIn = decoder.ReadBoolean("RunIn");
            CalculateParams = decoder.ReadBoolean("CalculateParams");
            TuneRule = decoder.ReadInt16("TuneRule");
            State = decoder.ReadInt16("State");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_CompactConfig data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_CompactConfig")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_CompactConfig")]
    public class PID_CompactConfig : SimaticSystemStructures
    {
        /// <summary>
        /// The InputPerOn property.
        /// </summary>
        public bool InputPerOn { get; set; }
        
        /// <summary>
        /// The InvertControl property.
        /// </summary>
        public bool InvertControl { get; set; }
        
        /// <summary>
        /// The InputUpperLimit property.
        /// </summary>
        public float InputUpperLimit { get; set; }
        
        /// <summary>
        /// The InputLowerLimit property.
        /// </summary>
        public float InputLowerLimit { get; set; }
        
        /// <summary>
        /// The InputUpperWarning property.
        /// </summary>
        public float InputUpperWarning { get; set; }
        
        /// <summary>
        /// The InputLowerWarning property.
        /// </summary>
        public float InputLowerWarning { get; set; }
        
        /// <summary>
        /// The OutputUpperLimit property.
        /// </summary>
        public float OutputUpperLimit { get; set; }
        
        /// <summary>
        /// The OutputLowerLimit property.
        /// </summary>
        public float OutputLowerLimit { get; set; }
        
        /// <summary>
        /// The SetpointUpperLimit property.
        /// </summary>
        public float SetpointUpperLimit { get; set; }
        
        /// <summary>
        /// The SetpointLowerLimit property.
        /// </summary>
        public float SetpointLowerLimit { get; set; }
        
        /// <summary>
        /// The MinimumOnTime property.
        /// </summary>
        public float MinimumOnTime { get; set; }
        
        /// <summary>
        /// The MinimumOffTime property.
        /// </summary>
        public float MinimumOffTime { get; set; }
        
        /// <summary>
        /// The InputScaling property.
        /// </summary>
        public PID_Scaling InputScaling { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteBoolean("InputPerOn", InputPerOn);
            encoder.WriteBoolean("InvertControl", InvertControl);
            encoder.WriteFloat("InputUpperLimit", InputUpperLimit);
            encoder.WriteFloat("InputLowerLimit", InputLowerLimit);
            encoder.WriteFloat("InputUpperWarning", InputUpperWarning);
            encoder.WriteFloat("InputLowerWarning", InputLowerWarning);
            encoder.WriteFloat("OutputUpperLimit", OutputUpperLimit);
            encoder.WriteFloat("OutputLowerLimit", OutputLowerLimit);
            encoder.WriteFloat("SetpointUpperLimit", SetpointUpperLimit);
            encoder.WriteFloat("SetpointLowerLimit", SetpointLowerLimit);
            encoder.WriteFloat("MinimumOnTime", MinimumOnTime);
            encoder.WriteFloat("MinimumOffTime", MinimumOffTime);
            encoder.WriteExtensionObject<PID_Scaling>("InputScaling", InputScaling);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            InputPerOn = decoder.ReadBoolean("InputPerOn");
            InvertControl = decoder.ReadBoolean("InvertControl");
            InputUpperLimit = decoder.ReadFloat("InputUpperLimit");
            InputLowerLimit = decoder.ReadFloat("InputLowerLimit");
            InputUpperWarning = decoder.ReadFloat("InputUpperWarning");
            InputLowerWarning = decoder.ReadFloat("InputLowerWarning");
            OutputUpperLimit = decoder.ReadFloat("OutputUpperLimit");
            OutputLowerLimit = decoder.ReadFloat("OutputLowerLimit");
            SetpointUpperLimit = decoder.ReadFloat("SetpointUpperLimit");
            SetpointLowerLimit = decoder.ReadFloat("SetpointLowerLimit");
            MinimumOnTime = decoder.ReadFloat("MinimumOnTime");
            MinimumOffTime = decoder.ReadFloat("MinimumOffTime");
            InputScaling = decoder.ReadExtensionObject<PID_Scaling>("InputScaling");
            
            decoder.PopNamespace();
        }
    }

    /// <summary>
    /// Class for the PID_CompactControl data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_CompactControl")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_CompactControl")]
    public class PID_CompactControl : SimaticSystemStructures
    {
        /// <summary>
        /// The PIDInit property.
        /// </summary>
        public bool PIDInit { get; set; }
        
        /// <summary>
        /// The IntegralSum property.
        /// </summary>
        public float IntegralSum { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteBoolean("PIDInit", PIDInit);
            encoder.WriteFloat("IntegralSum", IntegralSum);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            PIDInit = decoder.ReadBoolean("PIDInit");
            IntegralSum = decoder.ReadFloat("IntegralSum");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_CompactControlParams data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_CompactControlParams")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_CompactControlParams")]
    public class PID_CompactControlParams : SimaticSystemStructures
    {
        /// <summary>
        /// The Gain property.
        /// </summary>
        public float Gain { get; set; }
        
        /// <summary>
        /// The Ti property.
        /// </summary>
        public float Ti { get; set; }
        
        /// <summary>
        /// The Td property.
        /// </summary>
        public float Td { get; set; }
        
        /// <summary>
        /// The TdFiltRatio property.
        /// </summary>
        public float TdFiltRatio { get; set; }
        
        /// <summary>
        /// The PWeighting property.
        /// </summary>
        public float PWeighting { get; set; }
        
        /// <summary>
        /// The DWeighting property.
        /// </summary>
        public float DWeighting { get; set; }
        
        /// <summary>
        /// The Cycle property.
        /// </summary>
        public float Cycle { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteFloat("Gain", Gain);
            encoder.WriteFloat("Ti", Ti);
            encoder.WriteFloat("Td", Td);
            encoder.WriteFloat("TdFiltRatio", TdFiltRatio);
            encoder.WriteFloat("PWeighting", PWeighting);
            encoder.WriteFloat("DWeighting", DWeighting);
            encoder.WriteFloat("Cycle", Cycle);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            Gain = decoder.ReadFloat("Gain");
            Ti = decoder.ReadFloat("Ti");
            Td = decoder.ReadFloat("Td");
            TdFiltRatio = decoder.ReadFloat("TdFiltRatio");
            PWeighting = decoder.ReadFloat("PWeighting");
            DWeighting = decoder.ReadFloat("DWeighting");
            Cycle = decoder.ReadFloat("Cycle");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_CompactRetain data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_CompactRetain")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_CompactRetain")]
    public class PID_CompactRetain : SimaticSystemStructures
    {
        /// <summary>
        /// The CtrlParams property.
        /// </summary>
        public PID_CompactControlParams CtrlParams { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteExtensionObject<PID_CompactControlParams>("CtrlParams", CtrlParams);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            CtrlParams = decoder.ReadExtensionObject<PID_CompactControlParams>("CtrlParams");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_CompactSelfTune data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_CompactSelfTune")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_CompactSelfTune")]
    public class PID_CompactSelfTune : SimaticSystemStructures
    {
        /// <summary>
        /// The SUT property.
        /// </summary>
        public PID_Compact_SUT SUT { get; set; }
        
        /// <summary>
        /// The TIR property.
        /// </summary>
        public PID_Compact_TIR TIR { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteExtensionObject<PID_Compact_SUT>("SUT", SUT);
            encoder.WriteExtensionObject<PID_Compact_TIR>("TIR", TIR);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            SUT = decoder.ReadExtensionObject<PID_Compact_SUT>("SUT");
            TIR = decoder.ReadExtensionObject<PID_Compact_TIR>("TIR");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_CycleTime data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_CycleTime")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_CycleTime")]
    public class PID_CycleTime : SimaticSystemStructures
    {
        /// <summary>
        /// The StartEstimation property.
        /// </summary>
        public bool StartEstimation { get; set; }
        
        /// <summary>
        /// The EnEstimation property.
        /// </summary>
        public bool EnEstimation { get; set; }
        
        /// <summary>
        /// The EnMonitoring property.
        /// </summary>
        public bool EnMonitoring { get; set; }
        
        /// <summary>
        /// The Value property.
        /// </summary>
        public float Value { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteBoolean("StartEstimation", StartEstimation);
            encoder.WriteBoolean("EnEstimation", EnEstimation);
            encoder.WriteBoolean("EnMonitoring", EnMonitoring);
            encoder.WriteFloat("Value", Value);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            StartEstimation = decoder.ReadBoolean("StartEstimation");
            EnEstimation = decoder.ReadBoolean("EnEstimation");
            EnMonitoring = decoder.ReadBoolean("EnMonitoring");
            Value = decoder.ReadFloat("Value");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the PID_Scaling data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_PID_Scaling")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_PID_Scaling")]
    public class PID_Scaling : SimaticSystemStructures
    {
        /// <summary>
        /// The UpperPointIn property.
        /// </summary>
        public float UpperPointIn { get; set; }
        
        /// <summary>
        /// The LowerPointIn property.
        /// </summary>
        public float LowerPointIn { get; set; }
        
        /// <summary>
        /// The UpperPointOut property.
        /// </summary>
        public float UpperPointOut { get; set; }
        
        /// <summary>
        /// The LowerPointOut property.
        /// </summary>
        public float LowerPointOut { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteFloat("UpperPointIn", UpperPointIn);
            encoder.WriteFloat("LowerPointIn", LowerPointIn);
            encoder.WriteFloat("UpperPointOut", UpperPointOut);
            encoder.WriteFloat("LowerPointOut", LowerPointOut);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            UpperPointIn = decoder.ReadFloat("UpperPointIn");
            LowerPointIn = decoder.ReadFloat("LowerPointIn");
            UpperPointOut = decoder.ReadFloat("UpperPointOut");
            LowerPointOut = decoder.ReadFloat("LowerPointOut");
            
            decoder.PopNamespace();
        }
    }
    
    /// <summary>
    /// Class for the DTL data type.
    /// </summary>
    [Workstation.ServiceModel.Ua.DataTypeId("nsu=http://www.siemens.com/simatic-s7-opcua;s=DT_DTL")]
    [Workstation.ServiceModel.Ua.BinaryEncodingId("nsu=http://www.siemens.com/simatic-s7-opcua;s=TE_DTL")]
    public class DTL : SimaticSystemStructures
    {
        /// <summary>
        /// The YEAR property.
        /// </summary>
        public ushort YEAR { get; set; }
        
        /// <summary>
        /// The MONTH property.
        /// </summary>
        public byte MONTH { get; set; }
        
        /// <summary>
        /// The DAY property.
        /// </summary>
        public byte DAY { get; set; }
        
        /// <summary>
        /// The WEEKDAY property.
        /// </summary>
        public byte WEEKDAY { get; set; }
        
        /// <summary>
        /// The HOUR property.
        /// </summary>
        public byte HOUR { get; set; }
        
        /// <summary>
        /// The MINUTE property.
        /// </summary>
        public byte MINUTE { get; set; }
        
        /// <summary>
        /// The SECOND property.
        /// </summary>
        public byte SECOND { get; set; }
        
        /// <summary>
        /// The NANOSECOND property.
        /// </summary>
        public uint NANOSECOND { get; set; }
        
        /// <<inheritdoc/>
        public override void Encode(Workstation.ServiceModel.Ua.IEncoder encoder)
        {
            base.Encode(encoder);
            encoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            encoder.WriteUInt16("YEAR", YEAR);
            encoder.WriteByte("MONTH", MONTH);
            encoder.WriteByte("DAY", DAY);
            encoder.WriteByte("WEEKDAY", WEEKDAY);
            encoder.WriteByte("HOUR", HOUR);
            encoder.WriteByte("MINUTE", MINUTE);
            encoder.WriteByte("SECOND", SECOND);
            encoder.WriteUInt32("NANOSECOND", NANOSECOND);
            
            encoder.PopNamespace();
        }
        
        /// <<inheritdoc/>
        public override void Decode(Workstation.ServiceModel.Ua.IDecoder decoder)
        {
            base.Decode(decoder);
            decoder.PushNamespace("http://www.siemens.com/simatic-s7-opcua");
            
            YEAR = decoder.ReadUInt16("YEAR");
            MONTH = decoder.ReadByte("MONTH");
            DAY = decoder.ReadByte("DAY");
            WEEKDAY = decoder.ReadByte("WEEKDAY");
            HOUR = decoder.ReadByte("HOUR");
            MINUTE = decoder.ReadByte("MINUTE");
            SECOND = decoder.ReadByte("SECOND");
            NANOSECOND = decoder.ReadUInt32("NANOSECOND");
            
            decoder.PopNamespace();
        }
    }
    
}
